
////149. Max Points on a Line
////this is brute force approach

int maxPoints(vector<vector<int>>& points) {
        int n=points.size();
        if(n==1){
            return 1;
        }
        int result=0;

        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int count=2;

                int diffX=points[j][0]-points[i][0];
                int diffY=points[j][1]-points[i][1];
                //int slope=diffY/diffX;

                for(int k=0;k<n;k++){
                    if(k!=i && k!=j){
                        int diffX_=points[k][0]-points[i][0];
                        int diffY_=points[k][1]-points[i][1];

                        if(diffY*diffX_ == diffY_*diffX){
                            count++;
                        }
                    }
                    result=max(result,count);
                }
            }
        }
        return result;
    }



    //////method-2
    ///optimal approach
    //finding the theta from all corresponding points

    int maxPoints(vector<vector<int>>& points) {
        int n=points.size();
        if(n==1){
            return 1;
        }
        int result=0;

        for(int i=0;i<n;i++){
            unordered_map<double,int> mp;
            for(int j=0;j<n;j++){
                if(j==i){
                    continue;
                }

                auto diffX=points[j][0]-points[i][0];
                auto diffY=points[j][1]-points[i][1];

                auto theta=atan2(diffY,diffX);
                mp[theta]++;
            }
            for(auto &it: mp){
                result=max(result,it.second+1);
            }
        }
        return result;
    }